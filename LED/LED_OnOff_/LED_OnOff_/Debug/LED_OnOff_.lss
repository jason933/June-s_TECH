
LED_OnOff_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000964  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000824  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f9  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000016a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041e  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000114  00000000  00000000  00001ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001bfa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	4e c0       	rjmp	.+156    	; 0x138 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <util/delay.h>


int main(void)
{
	DDRD = 0xff;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	81 bb       	out	0x11, r24	; 17
	PORTD = 0xff;
  a2:	82 bb       	out	0x12, r24	; 18
    while (1) 
    {
		
		for (int i=0; i<7; i++)
		{
			PORTD = ~(1 << i);
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	70 e0       	ldi	r23, 0x00	; 0
			_delay_ms(500);
		}
		for (int i=0; i<7; i++)
		{
			PORTD = ~(0x80 >> i);
  a8:	40 e8       	ldi	r20, 0x80	; 128
  aa:	50 e0       	ldi	r21, 0x00	; 0
			_delay_ms(500);
		}
		PORTD = 0x00;
		_delay_ms(500);
		PORTD = 0xff;
  ac:	ef ef       	ldi	r30, 0xFF	; 255
	
    /* Replace with your application code */
    while (1) 
    {
		
		for (int i=0; i<7; i++)
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTD = ~(1 << i);
  b2:	9b 01       	movw	r18, r22
  b4:	08 2e       	mov	r0, r24
  b6:	02 c0       	rjmp	.+4      	; 0xbc <main+0x1e>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	0a 94       	dec	r0
  be:	e2 f7       	brpl	.-8      	; 0xb8 <main+0x1a>
  c0:	20 95       	com	r18
  c2:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	39 e6       	ldi	r19, 0x69	; 105
  c8:	f8 e1       	ldi	r31, 0x18	; 24
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	30 40       	sbci	r19, 0x00	; 0
  ce:	f0 40       	sbci	r31, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x2c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x36>
  d4:	00 00       	nop
	
    /* Replace with your application code */
    while (1) 
    {
		
		for (int i=0; i<7; i++)
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	87 30       	cpi	r24, 0x07	; 7
  da:	91 05       	cpc	r25, r1
  dc:	51 f7       	brne	.-44     	; 0xb2 <main+0x14>
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
			PORTD = ~(1 << i);
			_delay_ms(500);
		}
		for (int i=0; i<7; i++)
		{
			PORTD = ~(0x80 >> i);
  e2:	9a 01       	movw	r18, r20
  e4:	08 2e       	mov	r0, r24
  e6:	02 c0       	rjmp	.+4      	; 0xec <main+0x4e>
  e8:	35 95       	asr	r19
  ea:	27 95       	ror	r18
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <main+0x4a>
  f0:	20 95       	com	r18
  f2:	22 bb       	out	0x12, r18	; 18
  f4:	2f ef       	ldi	r18, 0xFF	; 255
  f6:	39 e6       	ldi	r19, 0x69	; 105
  f8:	f8 e1       	ldi	r31, 0x18	; 24
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	30 40       	sbci	r19, 0x00	; 0
  fe:	f0 40       	sbci	r31, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x5c>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x66>
 104:	00 00       	nop
		for (int i=0; i<7; i++)
		{
			PORTD = ~(1 << i);
			_delay_ms(500);
		}
		for (int i=0; i<7; i++)
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	87 30       	cpi	r24, 0x07	; 7
 10a:	91 05       	cpc	r25, r1
 10c:	51 f7       	brne	.-44     	; 0xe2 <main+0x44>
		{
			PORTD = ~(0x80 >> i);
			_delay_ms(500);
		}
		PORTD = 0x00;
 10e:	12 ba       	out	0x12, r1	; 18
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	39 e6       	ldi	r19, 0x69	; 105
 114:	88 e1       	ldi	r24, 0x18	; 24
 116:	21 50       	subi	r18, 0x01	; 1
 118:	30 40       	sbci	r19, 0x00	; 0
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x78>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x82>
 120:	00 00       	nop
		_delay_ms(500);
		PORTD = 0xff;
 122:	e2 bb       	out	0x12, r30	; 18
 124:	9f ef       	ldi	r25, 0xFF	; 255
 126:	f9 e6       	ldi	r31, 0x69	; 105
 128:	28 e1       	ldi	r18, 0x18	; 24
 12a:	91 50       	subi	r25, 0x01	; 1
 12c:	f0 40       	sbci	r31, 0x00	; 0
 12e:	20 40       	sbci	r18, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0x8c>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x96>
 134:	00 00       	nop
 136:	bb cf       	rjmp	.-138    	; 0xae <main+0x10>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
